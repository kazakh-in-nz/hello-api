name: CI Checks

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.22

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Run Format Check
        run: make check-format

  vet:
    name: Vet Check
    runs-on: ubuntu-latest
    needs:
      - format-check
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.22

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Run Vet Check
        run: make vet

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Lint
        uses: golangci/golangci-lint-action@v2

  test:
    needs:
      - format-check
      - vet
      - lint
    name: Test App
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.22

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Run Test
        run: make test

      - name: Coverage Check
        run: make coverage

      - name: Generate Report
        run: make report

      - name: Copy Files
        run: |
          mkdir  reports
          cp cover.html reports/.

      - name: Archive
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: reports

  build:
    name: Build App
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.22

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build
        run: make build

      - name: Copy Files
        run: |
          mkdir  artifacts
          cp api artifacts/.

      - name: Archive
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: artifacts

  deliver:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Download binary
        uses: actions/download-artifact@v2
        with:
          name: api

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Still in experimentation phase
          draft: true
          prerelease: true

      - name: Upload Release Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: api
          asset_name: api
          asset_content_type: application/octet-stream

  deploy-paas:
    name: Deploy PaaS
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Access Secret
        id: access-secret
        run: |
          ACCESS_TOKEN=$(echo "${{ steps.auth.outputs.access_token }}")
          curl $(echo ${{ secrets.ACCESS_TOKEN_QUERY_URL }}) \
            --header "Authorization: Bearer $ACCESS_TOKEN"

      - name: Deploy App
        id: deploy
        uses: google-github-actions/deploy-appengine@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Test Deployment
        id: test
        run: curl "${{ steps.deploy.outputs.version_url }}/translate/hello"
